<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>非模态查找对话框与主窗口的通信</title>
    <url>/2019/12/01/2019-12-1-qt-findDlg-nonmodal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何实现非模态查找对话框与主窗口的通信来达到查找的目的</p>
<a id="more"></a>
<h4 id="主窗口设计接受信号槽"><a href="#主窗口设计接受信号槽" class="headerlink" title="主窗口设计接受信号槽"></a>主窗口设计接受信号槽</h4><p>在<code>MainWindow.h</code>声明接受信号槽</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">private slots:</span><br><span class="line">	void StartSearch(const QString &amp;data, bool cs, bool forward);</span><br></pre></td></tr></table></figure>
<p>在<code>MainWindow.cpp</code>主窗口函数内以非模态运行对话框</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void MainWindow::Find(bool)&#123;</span><br><span class="line">	findtext = new findText(this);</span><br><span class="line">	// this窗口的StartSearch函数接受来自findtext发过来的信号serachsignal的参数</span><br><span class="line">	// serachsignal内的参数实现了两个窗口间的通信</span><br><span class="line">	connect(findtext, SIGNAL(searchSignal(const QString&amp;, bool, bool)),</span><br><span class="line">			this, SLOT(StartSearch(const QString&amp;, bool, bool)));</span><br><span class="line">	// 当前活动窗口(QTextEdit)鼠标指针置于起始位置</span><br><span class="line">	activeEditor()-&gt;moveCursor(QTextCursor::Start);</span><br><span class="line">	// 没有设置Qt::WindowModality属性值则show()-非模态,</span><br><span class="line">	// open()-半模态,<span class="built_in">exec</span>()-模态，阻塞父窗口</span><br><span class="line">	findtext-&gt;show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接受信号槽函数设计</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void MainWindow::StartSearch(const QString &amp;data, bool cs, bool forward)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!activeEditor())&#123;</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bool isfind;</span><br><span class="line">    // cs为真，匹配大小写</span><br><span class="line">    <span class="keyword">if</span>(cs)&#123;</span><br><span class="line">        // 如果forward为真，向前查找</span><br><span class="line">        <span class="keyword">if</span>(forward)&#123;</span><br><span class="line">            isfind = activeEditor()-&gt;find(data,QTextDocument::FindCaseSensitively);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            isfind = activeEditor()-&gt;find(data, QTextDocument::FindBackward | QTextDocument::FindCaseSensitively);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(forward)&#123;</span><br><span class="line">            isfind = activeEditor()-&gt;find(data);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            isfind = activeEditor()-&gt;find(data,QTextDocument::FindBackward);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isfind)&#123;</span><br><span class="line">         // 查找到后高亮显示</span><br><span class="line">         QPalette palette= activeEditor()-&gt;palette();</span><br><span class="line">         palette.setColor(QPalette::Highlight,palette.color(QPalette::Active,QPalette::Highlight));</span><br><span class="line">         activeEditor()-&gt;setPalette(palette);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="findtext设计searchSignal信号"><a href="#findtext设计searchSignal信号" class="headerlink" title="findtext设计searchSignal信号"></a>findtext设计searchSignal信号</h4><p>在<code>findText.h</code>声明信号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">signals:</span><br><span class="line">    void searchSignal(const QString &amp;, bool, bool);</span><br></pre></td></tr></table></figure>
<p>在<code>findText.cpp</code>发送信号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void findText::emitSearchSignal()</span><br><span class="line">&#123;</span><br><span class="line">    QString string = ui-&gt;lineEdit-&gt;text();</span><br><span class="line">    // cs-&gt;匹配大小写，fw向前查找</span><br><span class="line">    bool cs = ui-&gt;checkBox-&gt;isChecked()?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">    bool fw = ui-&gt;checkBox_2-&gt;isChecked()?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!string.isEmpty())&#123;</span><br><span class="line">		// 发送信号</span><br><span class="line">        emit searchSignal(string, cs, fw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt对话框通信</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt如何创建一个函数调用时创建调用完销毁的临时对话框</title>
    <url>/2019/11/30/2019-11-30-qt-new-temporary-dialog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Qt在对话框内容较少时可不使用qt设计师类而是在函数调用时新建一个临时对话框</p>
<a id="more"></a>
<h4 id="首先新建一个Dialog对象及指向此对象指针"><a href="#首先新建一个Dialog对象及指向此对象指针" class="headerlink" title="首先新建一个Dialog对象及指向此对象指针"></a>首先新建一个Dialog对象及指向此对象指针</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">QDialog *tabledlg = new QDialog(this);</span><br><span class="line">tabledlg-&gt;setGeometry(QRect(this-&gt;x()*3/2,this-&gt;y()*3/2,300,300));</span><br></pre></td></tr></table></figure>
<h4 id="加入控件"><a href="#加入控件" class="headerlink" title="加入控件"></a>加入控件</h4><p>加入数字输入框</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">QSpinBox cellSpacing(tabledlg), cellPadding(tabledlg), rowNum(tabledlg), colNum(tabledlg);</span><br><span class="line">cellSpacing.setGeometry(QRect(120,20,100,20));cellPadding.setGeometry(QRect(120,50,100,20));</span><br><span class="line">rowNum.setGeometry(QRect(120,80,100,20));colNum.setGeometry(QRect(120,110,100,20));</span><br></pre></td></tr></table></figure>
<p>一个对话框必不可少的是确认和取消按钮，有两种方法添加</p>
<ol>
<li>使用QDialogButtonBox类<br>QDialogButtonBox类包含一个对话框所有的系统自带的默认按钮类型，使用方法如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 新建并指定父窗口为tabledlg</span><br><span class="line">QDialogButtonBox buttonBox(tabledlg);</span><br><span class="line">// 添加确认和取消按钮</span><br><span class="line">buttonBox.addButton(QDialogButtonBox::Ok);</span><br><span class="line">buttonBox.addButton(QDialogButtonBox::Cancel);</span><br><span class="line">// 设置位置</span><br><span class="line">buttonBox.setGeometry(QRect(60,160,120,20));</span><br><span class="line">// 将两个按钮的点击信号分别与对话框的两个槽函数accept和reject联系起来</span><br><span class="line">connect(buttonBox.button(QDialogButtonBox::Ok),SIGNAL(clicked(bool)),tabledlg,SLOT(accept()));</span><br><span class="line">connect(buttonBox.button(QDialogButtonBox::Cancel),SIGNAL(clicked(bool)),tabledlg,SLOT(reject()));</span><br></pre></td></tr></table></figure></li>
<li>使用QPushButton类<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">QPushButton btn_ok(<span class="string">"Ok"</span>,tabledlg), btn_cancel(<span class="string">"Cancel"</span>, tabledlg);</span><br><span class="line">btn_ok.setGeometry(QRect(60,160,60,20));</span><br><span class="line">btn_cancel.setGeometry(QRect(130,160,60,20));</span><br><span class="line">// 同上</span><br><span class="line">connect(&amp;btn_ok,SIGNAL(clicked()),tabledlg,SLOT(accept()));</span><br><span class="line">connect(&amp;btn_cancel,SIGNAL(clicked()),tabledlg,SLOT(reject()));</span><br></pre></td></tr></table></figure>
<h4 id="获得对话框的输入框value以达到和主窗口通信的目的"><a href="#获得对话框的输入框value以达到和主窗口通信的目的" class="headerlink" title="获得对话框的输入框value以达到和主窗口通信的目的"></a>获得对话框的输入框value以达到和主窗口通信的目的</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int cs, cp, rn, cn;</span><br><span class="line"><span class="keyword">if</span>(tabledlg-&gt;<span class="built_in">exec</span>() == QDialog::Accepted)&#123;</span><br><span class="line">	cs = cellSpacing.value(), cp=cellPadding.value(), rn=rowNum.value(), cn=colNum.value();</span><br><span class="line">	QTextCursor cursor = activeEditor()-&gt;textCursor();</span><br><span class="line">	QTextTableFormat format;           // 表格格式</span><br><span class="line">	format.setCellSpacing(cs);         // 表格外边白</span><br><span class="line">	format.setCellPadding(cp);         // 表格内边白</span><br><span class="line">	cursor.insertTable(rn, cn, format);// 插入rn行cn列表格</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
参考<br>[1].<a href="https://zhidao.baidu.com/question/561199373.html" target="_blank" rel="noopener">qt中如何临时的定义一个Qdialog的实例，然后进行操作</a></li>
</ol>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>qt临时对话框</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt实现中英文切换</title>
    <url>/2019/11/29/2019-11-29-qt-multi-language/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><a id="more"></a>
<ol>
<li>在代码中将需要进行翻译的部分用<code>tr()</code>函数包裹起来。</li>
<li>在项目配置文件<code>*.pro</code>中加上<code>TRANSLATIONS = en_US.ts zh_CN.ts</code></li>
<li>在菜单栏<code>工具</code>-&gt;<code>外部</code>-&gt;<code>Qt语言家</code>-&gt;<code>更新翻译</code>，运行lupdate工具，这是会生成.ts文件</li>
<li>在菜单栏<code>文件</code>-&gt;<code>打开文件，用..</code>选择.ts文件，完成翻译工作</li>
<li>在菜单栏<code>工具</code>-&gt;<code>外部</code>-&gt;<code>Qt语言家</code>-&gt;<code>发布翻译</code>，运行lrelease工具，这是会生成.qm文件</li>
</ol>
<h3 id="根据当前的区域设置自动选择语言包-main-cpp"><a href="#根据当前的区域设置自动选择语言包-main-cpp" class="headerlink" title="根据当前的区域设置自动选择语言包(main.cpp)"></a>根据当前的区域设置自动选择语言包(main.cpp)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">QApplication a(argc, argv);</span><br><span class="line">QString locale = QLocale::system().name();</span><br><span class="line">QTranslator *translator = new QTranslator(&amp;a);</span><br><span class="line">// 会在当前目录下的lang目录下寻找，可以不带<span class="string">".qm"</span>后缀名</span><br><span class="line">translator-&gt;load(QCoreApplication::applicationDirPath() + QString(<span class="string">"/lang/"</span> + locale));</span><br><span class="line">a.installTranslator(translator);   // 安装翻译器</span><br></pre></td></tr></table></figure>
<h3 id="函数实现动态切换-MainWindow-cpp"><a href="#函数实现动态切换-MainWindow-cpp" class="headerlink" title="函数实现动态切换(MainWindow.cpp)"></a>函数实现动态切换(MainWindow.cpp)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 语言设置</span><br><span class="line">void MainWindow::en_US(bool)&#123;</span><br><span class="line">    static QTranslator *translator;</span><br><span class="line">    <span class="keyword">if</span>(translator != NULL)&#123;</span><br><span class="line">        qApp-&gt;removeTranslator(translator);</span><br><span class="line">        delete translator;</span><br><span class="line">        translator = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    translator = new QTranslator(this);</span><br><span class="line">	// QCoreApplication::applicationDirPath() 获取当前运行程序的路径</span><br><span class="line">	// 而QDir::currentPath()只能获取当前程序运行路径的上一级路径</span><br><span class="line">    <span class="keyword">if</span>(translator-&gt;load( QCoreApplication::applicationDirPath() + <span class="string">"/lang/en_US.qm"</span>))&#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"en_US"</span>&lt;&lt;endl;</span><br><span class="line">        qApp-&gt;installTranslator(translator);</span><br><span class="line">    &#125;</span><br><span class="line">    ui-&gt;retranslateUi(this); //这一句很重要，加载建立完translator后需要更新界面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考资料<br><code>[1]</code><a href="https://blog.csdn.net/sinat_35523212/article/details/52348934" target="_blank" rel="noopener">Qt实现多国语言（即界面翻译）可实时进行切换</a><br><code>[2]</code><a href="https://blog.csdn.net/jays_/article/details/84401012" target="_blank" rel="noopener">QT实现多语言/动态切换（国际化）</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt多国语言切换</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt5.9利用QSplashScreen实现程序启动动画</title>
    <url>/2019/11/29/2019-11-29-qt-add-start-gif/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何在程序加载完成之前让用户觉得你的程序不是卡死，从而提高用户体验呢？</p>
<a id="more"></a>
<h3 id="加载图片并延时-main-cpp"><a href="#加载图片并延时-main-cpp" class="headerlink" title="加载图片并延时(main.cpp)"></a>加载图片并延时(main.cpp)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;QApplication&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QPixmap&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QSplashScreen&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QDateTime&gt;</span></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">	QApplication a(argc, argv);</span><br><span class="line">	QPixmap pixmap(<span class="string">":/images/hh"</span>); //加载资源文件中的图片</span><br><span class="line">	QSplashScreen splash(pixmap); //利用图片创建一个QSplashScreen对象</span><br><span class="line">	splash.show(); //显示图片</span><br><span class="line">	QDateTime time = QDateTime::currentDateTime();</span><br><span class="line">	QDateTime currentTime = QDateTime::currentDateTime();   //记录当前时间</span><br><span class="line">	<span class="keyword">while</span> (time.secsTo(currentTime) &lt;= 5)                   //5为需要延时的秒数</span><br><span class="line">	&#123;</span><br><span class="line">		currentTime = QDateTime::currentDateTime();	</span><br><span class="line">		a.processEvents();  </span><br><span class="line">	&#125;</span><br><span class="line">	Dialoghome w;</span><br><span class="line">	w.show();</span><br><span class="line">	splash.finish(&amp;w);</span><br><span class="line">	<span class="built_in">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="开机加载GIF动图并延时-main-cpp"><a href="#开机加载GIF动图并延时-main-cpp" class="headerlink" title="开机加载GIF动图并延时(main.cpp)"></a>开机加载GIF动图并延时(main.cpp)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;QApplication&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QMovie&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QPixmap&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QLabel&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QSplashScreen&gt;</span></span><br><span class="line"><span class="comment">#include &lt;QDateTime&gt;                         //添加QDateTime头文件</span></span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">	QApplication a(argc, argv);</span><br><span class="line">	QPixmap pixmap(<span class="string">":/images/bg"</span>); //在动画的底层会显示这张图片</span><br><span class="line">	// 这里很重要,用透明色填充,这样就相当于加了一个透明背景而不是有色彩的背景</span><br><span class="line">	pixmap.fill(Qt::transparent);  //</span><br><span class="line">	QSplashScreen splash(pixmap);  //利用图片创建一个QSplashScreen对象</span><br><span class="line">	QMovie movie(<span class="string">":/images/hh"</span>);   //创建启动需要显示的图片</span><br><span class="line">	QLabel label(&amp;splash);</span><br><span class="line">	label.setMovie(&amp;movie);</span><br><span class="line">	movie.start();  //启动GIF</span><br><span class="line">	splash.show();  //显示图片</span><br><span class="line">	QDateTime time = QDateTime::currentDateTime();</span><br><span class="line">	QDateTime currentTime = QDateTime::currentDateTime();   //记录当前时间</span><br><span class="line">	<span class="keyword">while</span> (time.secsTo(currentTime) &lt;= 5)                   //5为需要延时的秒数</span><br><span class="line">	&#123;</span><br><span class="line">		currentTime = QDateTime::currentDateTime();</span><br><span class="line">		a.processEvents();      //使程序在显示启动画面的同时仍能响应鼠标其他事件</span><br><span class="line">	&#125;;</span><br><span class="line">	MainWindow w;</span><br><span class="line">	w.show();</span><br><span class="line">	splash.finish(&amp;w);  //在主窗体对象初始化完成后,结束启动画面</span><br><span class="line">	<span class="built_in">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考文章<br>[1]<a href="https://blog.csdn.net/TanChengkai/article/details/100578097" target="_blank" rel="noopener">Qt中通过Qpixmap设置图片透明度</a><br>[2]<a href="https://blog.csdn.net/wangyachao0803/article/details/82839101" target="_blank" rel="noopener">Qt QSplashScreen 开机加载图片和动图</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt开机动画</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主题侧边栏嵌入网易云音乐</title>
    <url>/2019/11/28/2019-11-28-hexo-add-wangyiyun-music/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何在你的博客中嵌入音乐播放器使你的博客看起来更丰富呢？</p>
<a id="more"></a>
<ol>
<li>首先进入网页版的网易云音乐找到你喜欢的歌曲<br><img src="https://i.loli.net/2019/11/28/U85rytsiGRAcCEI.png" alt="wangye.png"></li>
<li>在歌曲详情页点击<code>生成外链播放器</code><br><img src="https://i.loli.net/2019/11/28/gfsDPCmuL2XtbQ5.png" alt="dianji.png"></li>
<li>然后选择是否自动播放等一些选项后直接复制代码<br><img src="https://i.loli.net/2019/11/28/vwO7MLcFuo63Sbn.png" alt="fuzhi.png"></li>
<li>在根目录下的<code>/theme/next/layout/_macro/sidebar.swig</code>文件中选择你要添加播放器的位置，然后粘贴外链接。<br><img src="https://i.loli.net/2019/11/28/rEmndfiUkL75ya8.png" alt="niantie.png"></li>
<li>重新生成运行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo 网易云音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next增加不蒜子统计功能</title>
    <url>/2019/11/27/2019-11-27-hexo-add-busuanzi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hexo增加不蒜子统计页面访问量、访问人数、及阅读数</p>
<a id="more"></a>
<p>编辑主题配置文件 <code>themes/next/_config.yml</code> 中的 <code>busuanzi_count</code>的配置项。<br>当enable: true时，代表开启全局开启。<br>若site_uv（本站访客数）、site_pv（本站访客数）、page_pv（本文总阅读量）的值均为false时，不蒜子仅作记录而不会在页面上显示。<br>我使用的是<code>nextV7.5.0</code>版本，该版本<code>\layout\_third-party\analytics</code>下没有<code>busuanzi-counter.swig</code>文件，而在<code>\layout\_third-party\statistics</code>目录下，复制粘贴到<code>analytics</code>目录下即可。<br>当你使用了<code>live2Dmod</code>在页面上时，不蒜子不能正常显示。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo busuanzi</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next使用Valine评论系统</title>
    <url>/2019/11/27/2019-11-27-hexo-add-valine/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hexo+next使用Valine评论系统</p>
<a id="more"></a>
<ol>
<li>获取<code>APP ID</code> 和 <code>APP Key</code><br>登录或注册 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> , 进入控制台后点击左下角创建应用，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了</li>
<li>打开_config.yml主题配置文件，搜索valine，填写<code>APP ID</code> 和 <code>APP Key</code>到对应位置。</li>
<li>在<code>LeanCloud</code> -&gt; <code>存储</code> -&gt; <code>创建Class</code> -&gt; <code>无限制的Class</code>，创建class名称为：Comment</li>
<li>在<code>LeanCloud</code> -&gt; <code>设置</code> -&gt; <code>安全中心</code>，把除<code>数据存储</code>外其他选项都关闭。</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo valine</tag>
      </tags>
  </entry>
  <entry>
    <title>修改文章tag标签的样式</title>
    <url>/2019/11/27/2019-11-27-hexo-change-tag-style/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>修改文章tag标签的样式及文章底部添加本文结束标志</p>
<a id="more"></a>
<h3 id="修改tag样式"><a href="#修改tag样式" class="headerlink" title="修改tag样式"></a>修改tag样式</h3><p>打开<code>next/_config.yml</code>文件，查找<code>tag_icon: false</code>改为true即可</p>
<h3 id="添加结束标志"><a href="#添加结束标志" class="headerlink" title="添加结束标志"></a>添加结束标志</h3><p>打开编辑<code>themes\next\layout\_macro\post.swig</code>，在文章结束的地方添加如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">    &lt;div style=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span><br><span class="line">        ---------本文已结束---------</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo tag样式</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo生成博文插入图片</title>
    <url>/2019/11/27/2019-11-27-hexo-blog-add-image/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hexo生成博文插入图片</p>
<a id="more"></a>
<ol>
<li>把主页配置文件<code>_config.yml</code>里的<code>post_asset_folder:false</code>这个选项设置为<code>true</code></li>
<li>安装插件,这是下载安装一个可以上传本地图片的插件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image -- save–save</span><br></pre></td></tr></table></figure></li>
<li>安装完成后，再运行<code>hexo n “title”</code>来生成md博文时，<br><code>/source/_posts</code>文件夹内除了<code>title.md</code>文件还有一个同名的文件夹<code>title</code>，<br>将你想在博文中插入的照片放到这个同名文件夹中即可。</li>
<li>插入图片只需要在想添加的位置写入以下形式，如<code>![图片1](1.png)</code>即可<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片不能显示时的的替代文字](图片名字.图片格式)</span><br></pre></td></tr></table></figure>
另外也可将图片存储到网络上以加快加载速度，而<a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a>是一个免费无注册的图片存储网站，我们可以将图片存储在上面然后把括号内换成图片的url就好了。</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo插入图片</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo下valine评论系统报410错</title>
    <url>/2019/11/27/2019-11-27-valine-410-post-error/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hexo下的next主题安装的valine评论系统报以下错误：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Code : undefined [410 POST https://avoscloud.com/1.1/classes/Comment]`</span><br></pre></td></tr></table></figure>

<p>一开始他是这样的<br><img src="https://i.loli.net/2019/11/28/bBpy98xVMHfagzD.png" alt="error410.png"><br>然后我再网上百度了一些解答，<a href="https://laytonsun.com/learning/2019-08/enable-comments.html" target="_blank" rel="noopener">有说是leancloud地区问题</a>的，<a href="https://www.jianshu.com/p/f4658df66a15" target="_blank" rel="noopener">也有说是版本之间一些参数的问题</a>，我检查一下我的发现都不是这些问题,</p>
<p>然后打开 <code>/next/_config.yml</code>主题配置文件看到了代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># When enable is set to be true</span></span><br><span class="line">  appid: 我的appid<span class="comment"># Your leancloud application appid</span></span><br><span class="line">  appkey: 我的appkey<span class="comment"># Your leancloud application appkey</span></span><br></pre></td></tr></table></figure>
<p>它在编辑器里是这样显示的<br><img src="https://i.loli.net/2019/11/28/jnU8TwqsO2Jbu9D.png" alt="config.png"><br>可以看到<code>enable: true</code>中的颜色根本没有改变，于是我把#及后面的注释换行，然后就高亮显示了，在运行一下，成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> </span><br><span class="line">  <span class="comment"># When enable is set to be true</span></span><br><span class="line">  appid: 我的appid</span><br><span class="line">  <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  appkey: 我的appkey</span><br><span class="line">  <span class="comment"># Your leancloud application appkey</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo valine410错误</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题如何添加动态背景canvas_nest</title>
    <url>/2019/11/27/2019-11-27-add-background-canvas-nest/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hexo next主题下怎么添加canvas_nest背景</p>
<a id="more"></a>
<p>我的hexo next是V7.5.0版本</p>
<ol>
<li>修改主题配置文件<br>打开 <code>/next/_config.yml</code>，<code>Ctrl+f</code>找到<code>Canvas-nest</code>，将<code>enable</code>改为<code>true</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
接下来有两种方法：<br>方法一：修改布局文件<br>打开 <code>next/layout/_layout.swig</code>，在<code>&lt;body&gt;&lt;/body&gt;</code>标签内添加以下代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span></span><br><span class="line"> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
方法二：下载插件<code>canvas-nest</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="line">themes/next-v7.5.0/<span class="built_in">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure>
然后运行以下代码重新构建<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo动态背景</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo右下角添加2d动画模型</title>
    <url>/2019/11/27/2019-11-27-add-live2dDemo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hexo右下角添加2d动画模型</p>
<a id="more"></a>
<ol>
<li>安装插件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></li>
<li>选择你喜欢的模型名字<br>在GitHub上<a href="https://github.com/summerscar/live2dDemo" target="_blank" rel="noopener">live2dDemo</a>有很多，可以选择里面的模型</li>
<li>将以下代码添加到主题配置文件_config.yml末尾，修改&lt;你喜欢的模型名字&gt;（如：z16）：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span></span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  <span class="built_in">log</span>: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-&lt;你喜欢的模型名字&gt;</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>建配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在站点目录下建文件夹live2d_models，</span><br><span class="line">再在live2d_models下建文件夹&lt;你喜欢的模型名字&gt;,</span><br><span class="line">再在&lt;你喜欢的模型名字&gt;下建json文件：&lt;你喜欢的模型名字&gt;.model.json</span><br></pre></td></tr></table></figure></li>
<li>安装模型<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-&lt;你喜欢的模型名字&gt;</span><br></pre></td></tr></table></figure></li>
<li>运行以下命令， 在<code>http://localhost:4000/</code>查看测试结果<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo添加live2dDemo</tag>
      </tags>
  </entry>
  <entry>
    <title>git bash每次运行hexo d都要输入密码的解决办法</title>
    <url>/2019/11/27/2019-11-27-hexo-no-password/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>每次运行hexo d都要输入密码的解决办法</p>
<a id="more"></a>
<p>尝试了网上的一些其他教程，都没有起作用，如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> `ssh-agent` </span><br><span class="line">ssh-add</span><br></pre></td></tr></table></figure>
<p>后来参考另一个解决方案：删除掉之前的passphrase密码就可以了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -p </span><br><span class="line"> 先确认旧密码</span><br><span class="line"> 当提示你输入新的密码的时候，直接两下enter就可以了</span><br></pre></td></tr></table></figure>
<p>另外还有一个<a href="https://www.jianshu.com/p/efaf72aab32e" target="_blank" rel="noopener">解决方案</a>：直接将你账号密码写在上传地址中,这样就不用每次更新都输入你的账号密码了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例如你的账号为: account,密码为 <span class="built_in">pwd</span>;</span><br><span class="line">那你的repo填写为下面这样即可</span><br><span class="line">github: https://account:<span class="built_in">pwd</span>@github.com/account/account.github.io.git</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo d去掉密码</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo配置404界面</title>
    <url>/2019/11/26/2019-11-26-hexo-add-404page/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文主要讲解hexo下的404界面配置</p>
<a id="more"></a>
<p>hexo托管于GitHub，所以404界面可以通过本地仓库添加到你的master分支的根目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line"> git commit -a -m<span class="string">"404"</span></span><br><span class="line"> git push origin master</span><br></pre></td></tr></table></figure>
<p>但当你再次部署hexo的时候，github上面的404页面又被删除了，因为每次执行<code>hexo d</code>的时候，都是把hexo\public目录下的文件上传到GitHub，而在你本地的文件夹内并没有这个文件，所以一同步就没了。</p>
<!--more-->
<p>而如果将404.html直接放在根目录的source文件夹下，在编译的时候会改变文本内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo\<span class="built_in">source</span>\404.html</span><br></pre></td></tr></table></figure>
<p>所以改为放在你配置的主题文件夹下的source文件夹内，如果有css文件则放在同级css文件夹下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo\themes\next\<span class="built_in">source</span>\404.html</span><br><span class="line">hexo\themes\next\<span class="built_in">source</span>\css\404.css</span><br></pre></td></tr></table></figure>
<p>这样在编译的时候会直接生成到public下,可以保持原本的内容直接被放到和index.html文件同级的public根目录下.</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo404界面</tag>
      </tags>
  </entry>
  <entry>
    <title>git的基本命令</title>
    <url>/2019/11/26/2019-11-26-basic-command-of-git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文主要讲解一些git的基本操作语句的使用</p>
<a id="more"></a>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init                <span class="comment">#初始化仓库</span></span><br><span class="line">git add readme.md       <span class="comment">#添加文件</span></span><br><span class="line">git status              <span class="comment">#查看文件状态（是否更改）</span></span><br><span class="line">git add .               <span class="comment">#把所有要提交的修改放到暂存区</span></span><br><span class="line">git commit -a -m <span class="string">"注释"</span> <span class="comment">#给所有变更的文件添加注释</span></span><br></pre></td></tr></table></figure>

<p>推送分支:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master  <span class="comment">#本地同步到远程仓库</span></span><br></pre></td></tr></table></figure>
<p>远程分支同步到本地:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master  <span class="comment">#远程仓库同步到本地</span></span><br></pre></td></tr></table></figure>
<h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><p>查看当前分支:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>
<p>创建dev分支，然后切换到dev分支:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure>
<p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch dev          <span class="comment"># 创建分支</span></span><br><span class="line">git checkout dev        <span class="comment"># 切换分支</span></span><br></pre></td></tr></table></figure>
<p>合并分支,git merge命令用于合并指定分支到当前分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure>
<p>删除分支:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git bash基本命令</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo博客</title>
    <url>/2019/11/26/2019-11-26-build-a-hexo-blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>搭建hexo博客</p>
<a id="more"></a>
<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ol>
<li><p><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>下载安装</p>
</li>
<li><p><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>下载安装</p>
</li>
<li><p>安装hexo，在git bash运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li><p>初始化Hexo，git bash依次运行以下命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务器，输入以下命令，运行即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
<li><p>浏览器访问网址:<code>http://localhost:4000/</code>，这时候你就可以看到自己的博客了</p>
</li>
</ol>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><ol>
<li><p>创建GitHubpages</p>
</li>
<li><p>添加SSH key，在git bash运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你的邮箱地址"</span></span><br></pre></td></tr></table></figure>
<p>注意在需要你输入密码的时候可以回车忽略，不然每次发布到GitHub上都需要输入密码，很麻烦</p>
</li>
<li><p>修改站点目录下的<code>_config.yml</code>文件，文件末尾添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>注意在每一个冒号后面都加上空格，不然会报错</p>
</li>
<li><p>推送到GithubPages。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
<li><p>浏览器访问<code>https://&lt;Github账号名称&gt;.github.io/</code>这时候你就可以看到自己的博客运行在GitHub上了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo搭建</tag>
      </tags>
  </entry>
</search>
